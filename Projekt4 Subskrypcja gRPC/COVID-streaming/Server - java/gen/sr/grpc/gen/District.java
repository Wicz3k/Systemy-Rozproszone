// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream.proto

package sr.grpc.gen;

/**
 * Protobuf enum {@code streaming.District}
 */
public enum District
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>All = 0;</code>
   */
  All(0),
  /**
   * <code>Dolnoslaskie = 1;</code>
   */
  Dolnoslaskie(1),
  /**
   * <code>Kujawsko_pomorskie = 2;</code>
   */
  Kujawsko_pomorskie(2),
  /**
   * <code>Lubelskie = 3;</code>
   */
  Lubelskie(3),
  /**
   * <code>Lubuskie = 4;</code>
   */
  Lubuskie(4),
  /**
   * <code>Lodzkie = 5;</code>
   */
  Lodzkie(5),
  /**
   * <code>Malopolskie = 6;</code>
   */
  Malopolskie(6),
  /**
   * <code>Mazowieckie = 7;</code>
   */
  Mazowieckie(7),
  /**
   * <code>Opolskie = 8;</code>
   */
  Opolskie(8),
  /**
   * <code>Podkarpackie = 9;</code>
   */
  Podkarpackie(9),
  /**
   * <code>Podlaskie = 10;</code>
   */
  Podlaskie(10),
  /**
   * <code>Pomorskie = 11;</code>
   */
  Pomorskie(11),
  /**
   * <code>Slaskie = 12;</code>
   */
  Slaskie(12),
  /**
   * <code>Swietokrzyskie = 13;</code>
   */
  Swietokrzyskie(13),
  /**
   * <code>Warminsko_mazurskie = 14;</code>
   */
  Warminsko_mazurskie(14),
  /**
   * <code>Wielkopolskie = 15;</code>
   */
  Wielkopolskie(15),
  /**
   * <code>Zachodniopomorskie = 16;</code>
   */
  Zachodniopomorskie(16),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>All = 0;</code>
   */
  public static final int All_VALUE = 0;
  /**
   * <code>Dolnoslaskie = 1;</code>
   */
  public static final int Dolnoslaskie_VALUE = 1;
  /**
   * <code>Kujawsko_pomorskie = 2;</code>
   */
  public static final int Kujawsko_pomorskie_VALUE = 2;
  /**
   * <code>Lubelskie = 3;</code>
   */
  public static final int Lubelskie_VALUE = 3;
  /**
   * <code>Lubuskie = 4;</code>
   */
  public static final int Lubuskie_VALUE = 4;
  /**
   * <code>Lodzkie = 5;</code>
   */
  public static final int Lodzkie_VALUE = 5;
  /**
   * <code>Malopolskie = 6;</code>
   */
  public static final int Malopolskie_VALUE = 6;
  /**
   * <code>Mazowieckie = 7;</code>
   */
  public static final int Mazowieckie_VALUE = 7;
  /**
   * <code>Opolskie = 8;</code>
   */
  public static final int Opolskie_VALUE = 8;
  /**
   * <code>Podkarpackie = 9;</code>
   */
  public static final int Podkarpackie_VALUE = 9;
  /**
   * <code>Podlaskie = 10;</code>
   */
  public static final int Podlaskie_VALUE = 10;
  /**
   * <code>Pomorskie = 11;</code>
   */
  public static final int Pomorskie_VALUE = 11;
  /**
   * <code>Slaskie = 12;</code>
   */
  public static final int Slaskie_VALUE = 12;
  /**
   * <code>Swietokrzyskie = 13;</code>
   */
  public static final int Swietokrzyskie_VALUE = 13;
  /**
   * <code>Warminsko_mazurskie = 14;</code>
   */
  public static final int Warminsko_mazurskie_VALUE = 14;
  /**
   * <code>Wielkopolskie = 15;</code>
   */
  public static final int Wielkopolskie_VALUE = 15;
  /**
   * <code>Zachodniopomorskie = 16;</code>
   */
  public static final int Zachodniopomorskie_VALUE = 16;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static District valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static District forNumber(int value) {
    switch (value) {
      case 0: return All;
      case 1: return Dolnoslaskie;
      case 2: return Kujawsko_pomorskie;
      case 3: return Lubelskie;
      case 4: return Lubuskie;
      case 5: return Lodzkie;
      case 6: return Malopolskie;
      case 7: return Mazowieckie;
      case 8: return Opolskie;
      case 9: return Podkarpackie;
      case 10: return Podlaskie;
      case 11: return Pomorskie;
      case 12: return Slaskie;
      case 13: return Swietokrzyskie;
      case 14: return Warminsko_mazurskie;
      case 15: return Wielkopolskie;
      case 16: return Zachodniopomorskie;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<District>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      District> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<District>() {
          public District findValueByNumber(int number) {
            return District.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return sr.grpc.gen.StreamingCOVID.getDescriptor().getEnumTypes().get(0);
  }

  private static final District[] VALUES = values();

  public static District valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private District(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:streaming.District)
}

